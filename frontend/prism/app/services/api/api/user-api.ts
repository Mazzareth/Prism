/* tslint:disable */
/* eslint-disable */
/**
 * Prism API
 * API for Prism project
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@prism.example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ArtistsRead404Response } from '../models';
// @ts-ignore
import type { PublicUser } from '../models';
// @ts-ignore
import type { User } from '../models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Allows authenticated users to update their own profile.
         * @summary Update user profile.
         * @param {string} username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
         * @param {string} [email] 
         * @param {string} [password] 
         * @param {boolean} [isArtist] 
         * @param {File | null} [profilePicture] 
         * @param {string | null} [bio] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeUpdate: async (username: string, email?: string, password?: string, isArtist?: boolean, profilePicture?: File | null, bio?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('usersMeUpdate', 'username', username)
            const localVarPath = `/users/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


            if (username !== undefined) { 
                localVarFormParams.append('username', username as any);
            }
    
            if (email !== undefined) { 
                localVarFormParams.append('email', email as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.append('password', password as any);
            }
    
            if (isArtist !== undefined) { 
                localVarFormParams.append('is_artist', String(isArtist) as any);
            }
    
            if (profilePicture !== undefined) { 
                localVarFormParams.append('profile_picture', profilePicture as any);
            }
    
            if (bio !== undefined) { 
                localVarFormParams.append('bio', bio as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the public profile of a specific user.
         * @summary Get user profile.
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRead: async (username: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('usersRead', 'username', username)
            const localVarPath = `/users/{username}/`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Allows authenticated users to update their own profile.
         * @summary Update user profile.
         * @param {string} username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
         * @param {string} [email] 
         * @param {string} [password] 
         * @param {boolean} [isArtist] 
         * @param {File | null} [profilePicture] 
         * @param {string | null} [bio] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersMeUpdate(username: string, email?: string, password?: string, isArtist?: boolean, profilePicture?: File | null, bio?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersMeUpdate(username, email, password, isArtist, profilePicture, bio, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.usersMeUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves the public profile of a specific user.
         * @summary Get user profile.
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRead(username: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersRead(username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.usersRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Allows authenticated users to update their own profile.
         * @summary Update user profile.
         * @param {string} username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
         * @param {string} [email] 
         * @param {string} [password] 
         * @param {boolean} [isArtist] 
         * @param {File | null} [profilePicture] 
         * @param {string | null} [bio] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeUpdate(username: string, email?: string, password?: string, isArtist?: boolean, profilePicture?: File | null, bio?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.usersMeUpdate(username, email, password, isArtist, profilePicture, bio, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the public profile of a specific user.
         * @summary Get user profile.
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRead(username: string, options?: RawAxiosRequestConfig): AxiosPromise<PublicUser> {
            return localVarFp.usersRead(username, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Allows authenticated users to update their own profile.
     * @summary Update user profile.
     * @param {string} username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @param {string} [email] 
     * @param {string} [password] 
     * @param {boolean} [isArtist] 
     * @param {File | null} [profilePicture] 
     * @param {string | null} [bio] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersMeUpdate(username: string, email?: string, password?: string, isArtist?: boolean, profilePicture?: File | null, bio?: string | null, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).usersMeUpdate(username, email, password, isArtist, profilePicture, bio, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the public profile of a specific user.
     * @summary Get user profile.
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersRead(username: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).usersRead(username, options).then((request) => request(this.axios, this.basePath));
    }
}

