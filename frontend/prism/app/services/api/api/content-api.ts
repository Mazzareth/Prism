/* tslint:disable */
/* eslint-disable */
/**
 * Prism API
 * API for Prism project
 *
 * The version of the OpenAPI document: v1
 * Contact: mercysquadrant@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ArtistsRead404Response } from '../models';
// @ts-ignore
import type { AuthLoginCreate400Response } from '../models';
// @ts-ignore
import type { Content } from '../models';
/**
 * ContentApi - axios parameter creator
 * @export
 */
export const ContentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Allows authenticated users to create new content items.
         * @summary Create new content.
         * @param {string} image 
         * @param {Set<string>} tags 
         * @param {string | null} [title] 
         * @param {boolean} [nsfw] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentCreate: async (image: string, tags: Set<string>, title?: string | null, nsfw?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'image' is not null or undefined
            assertParamExists('contentCreate', 'image', image)
            // verify required parameter 'tags' is not null or undefined
            assertParamExists('contentCreate', 'tags', tags)
            const localVarPath = `/content/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
            if (nsfw !== undefined) { 
                localVarFormParams.append('nsfw', String(nsfw) as any);
            }
                if (tags) {
                localVarFormParams.append('tags', tags.join(COLLECTION_FORMATS.csv));
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows the content owner to delete a specific content item.
         * @summary Delete content.
         * @param {string} contentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentDeleteDelete: async (contentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentId' is not null or undefined
            assertParamExists('contentDeleteDelete', 'contentId', contentId)
            const localVarPath = `/content/{content_id}/delete/`
                .replace(`{${"content_id"}}`, encodeURIComponent(String(contentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves details of a specific content item.
         * @summary Get content details.
         * @param {string} contentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentRead: async (contentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentId' is not null or undefined
            assertParamExists('contentRead', 'contentId', contentId)
            const localVarPath = `/content/{content_id}/`
                .replace(`{${"content_id"}}`, encodeURIComponent(String(contentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContentApi - functional programming interface
 * @export
 */
export const ContentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContentApiAxiosParamCreator(configuration)
    return {
        /**
         * Allows authenticated users to create new content items.
         * @summary Create new content.
         * @param {string} image 
         * @param {Set<string>} tags 
         * @param {string | null} [title] 
         * @param {boolean} [nsfw] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentCreate(image: string, tags: Set<string>, title?: string | null, nsfw?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Content>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentCreate(image, tags, title, nsfw, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Allows the content owner to delete a specific content item.
         * @summary Delete content.
         * @param {string} contentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentDeleteDelete(contentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentDeleteDelete(contentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentDeleteDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves details of a specific content item.
         * @summary Get content details.
         * @param {string} contentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentRead(contentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Content>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentRead(contentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContentApi - factory interface
 * @export
 */
export const ContentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContentApiFp(configuration)
    return {
        /**
         * Allows authenticated users to create new content items.
         * @summary Create new content.
         * @param {string} image 
         * @param {Set<string>} tags 
         * @param {string | null} [title] 
         * @param {boolean} [nsfw] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentCreate(image: string, tags: Set<string>, title?: string | null, nsfw?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<Content> {
            return localVarFp.contentCreate(image, tags, title, nsfw, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows the content owner to delete a specific content item.
         * @summary Delete content.
         * @param {string} contentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentDeleteDelete(contentId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentDeleteDelete(contentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves details of a specific content item.
         * @summary Get content details.
         * @param {string} contentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentRead(contentId: string, options?: RawAxiosRequestConfig): AxiosPromise<Content> {
            return localVarFp.contentRead(contentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContentApi - object-oriented interface
 * @export
 * @class ContentApi
 * @extends {BaseAPI}
 */
export class ContentApi extends BaseAPI {
    /**
     * Allows authenticated users to create new content items.
     * @summary Create new content.
     * @param {string} image 
     * @param {Set<string>} tags 
     * @param {string | null} [title] 
     * @param {boolean} [nsfw] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public contentCreate(image: string, tags: Set<string>, title?: string | null, nsfw?: boolean, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentCreate(image, tags, title, nsfw, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows the content owner to delete a specific content item.
     * @summary Delete content.
     * @param {string} contentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public contentDeleteDelete(contentId: string, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentDeleteDelete(contentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves details of a specific content item.
     * @summary Get content details.
     * @param {string} contentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public contentRead(contentId: string, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentRead(contentId, options).then((request) => request(this.axios, this.basePath));
    }
}

