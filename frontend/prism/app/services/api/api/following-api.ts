/* tslint:disable */
/* eslint-disable */
/**
 * Prism API
 * API for Prism project
 *
 * The version of the OpenAPI document: v1
 * Contact: mercysquadrant@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ArtistsRead404Response } from '../models';
// @ts-ignore
import type { AuthLoginCreate400Response } from '../models';
// @ts-ignore
import type { AuthLogoutCreate200Response } from '../models';
/**
 * FollowingApi - axios parameter creator
 * @export
 */
export const FollowingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Allows authenticated users to follow a specific artist.
         * @summary Follow an artist.
         * @param {string} artistUsername 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followingCreate: async (artistUsername: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'artistUsername' is not null or undefined
            assertParamExists('followingCreate', 'artistUsername', artistUsername)
            const localVarPath = `/following/{artist_username}/`
                .replace(`{${"artist_username"}}`, encodeURIComponent(String(artistUsername)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows authenticated users to unfollow a specific artist.
         * @summary Unfollow an artist.
         * @param {string} artistUsername 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followingDelete: async (artistUsername: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'artistUsername' is not null or undefined
            assertParamExists('followingDelete', 'artistUsername', artistUsername)
            const localVarPath = `/following/{artist_username}/`
                .replace(`{${"artist_username"}}`, encodeURIComponent(String(artistUsername)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FollowingApi - functional programming interface
 * @export
 */
export const FollowingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FollowingApiAxiosParamCreator(configuration)
    return {
        /**
         * Allows authenticated users to follow a specific artist.
         * @summary Follow an artist.
         * @param {string} artistUsername 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followingCreate(artistUsername: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthLogoutCreate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followingCreate(artistUsername, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FollowingApi.followingCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Allows authenticated users to unfollow a specific artist.
         * @summary Unfollow an artist.
         * @param {string} artistUsername 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followingDelete(artistUsername: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthLogoutCreate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followingDelete(artistUsername, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FollowingApi.followingDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FollowingApi - factory interface
 * @export
 */
export const FollowingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FollowingApiFp(configuration)
    return {
        /**
         * Allows authenticated users to follow a specific artist.
         * @summary Follow an artist.
         * @param {string} artistUsername 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followingCreate(artistUsername: string, options?: RawAxiosRequestConfig): AxiosPromise<AuthLogoutCreate200Response> {
            return localVarFp.followingCreate(artistUsername, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows authenticated users to unfollow a specific artist.
         * @summary Unfollow an artist.
         * @param {string} artistUsername 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followingDelete(artistUsername: string, options?: RawAxiosRequestConfig): AxiosPromise<AuthLogoutCreate200Response> {
            return localVarFp.followingDelete(artistUsername, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FollowingApi - object-oriented interface
 * @export
 * @class FollowingApi
 * @extends {BaseAPI}
 */
export class FollowingApi extends BaseAPI {
    /**
     * Allows authenticated users to follow a specific artist.
     * @summary Follow an artist.
     * @param {string} artistUsername 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowingApi
     */
    public followingCreate(artistUsername: string, options?: RawAxiosRequestConfig) {
        return FollowingApiFp(this.configuration).followingCreate(artistUsername, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows authenticated users to unfollow a specific artist.
     * @summary Unfollow an artist.
     * @param {string} artistUsername 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowingApi
     */
    public followingDelete(artistUsername: string, options?: RawAxiosRequestConfig) {
        return FollowingApiFp(this.configuration).followingDelete(artistUsername, options).then((request) => request(this.axios, this.basePath));
    }
}

